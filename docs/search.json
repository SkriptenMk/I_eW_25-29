[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Willkommen",
    "section": "",
    "text": "Hier finden Sie die Informationen für den Informatikunterricht."
  },
  {
    "objectID": "index.html#programm",
    "href": "index.html#programm",
    "title": "Willkommen",
    "section": "Programm",
    "text": "Programm\n\n\n\nDatum\nThema\n\n\n\n\n18.08.2025\nWas ist Informatik\n\n\n25.08.2025\nVorbereiten der Arbeitsumgebung\n\n\n01.09.2025\nProblemlösung in der Informatik\n\n\n08.09.2025\nVariablen als Wegweiser zu Objekten\n\n\n15.09.2025\nSchlaufen\n\n\n22.09.2025\nBedingungen\n\n\n20.10.2025\nAnwendungsübung\n\n\n27.10.2025\nIndividuelle Prüfungsvorbereitung\n\n\n03.11.2025\nTest\n\n\n10.11.2025\nDatenstrukturen\n\n\n17.11.2025\nDatenstrukturen\n\n\n24.11.2025\nAlgorithmen\n\n\n01.12.2025\nAlgorithmen\n\n\n08.12.2025\nWiederholung ohne Schleife (Rekursion)\n\n\n15.12.2025\nAnwendungsübungen\n\n\n05.01.2026\nIndividuelle Prüfungsvorbereitung\n\n\n12.01.2026\nTest\n\n\n\nDas Programm widerspiegelt den aktuellen Stand der Planung. Es ist im Verlauf des Semesters mit Änderungen zu rechnen."
  },
  {
    "objectID": "index.html#materielle-voraussetzungen",
    "href": "index.html#materielle-voraussetzungen",
    "title": "Willkommen",
    "section": "Materielle Voraussetzungen",
    "text": "Materielle Voraussetzungen\nFür den Informatikunterricht ist ein Laptop erforderlich (mit einem iPad können Sie die im Unterricht gestellten Aufgaben nicht lösen). Für Ihren Laptop brachen Sie zur Installation der erforderlichen Software Administratorenrechte.\nAusserdem müssen Sie sicherstellen, dass Ihr Akku zu Beginn des Unterrichts einen Ladestand aufweist, der eine Doppelstunde durchhält."
  },
  {
    "objectID": "index.html#beurteilung",
    "href": "index.html#beurteilung",
    "title": "Willkommen",
    "section": "Beurteilung",
    "text": "Beurteilung\nPro Semester sind zwei schriftliche Prüfungen vorgesehen. Ausserdem wird die mündliche Beteiligung benotet. Als mündliche Beteiligung gilt insbesondere auch das Stellen von Fragen.\nDie Zeugnisnote berechnet sich als gewichteter Durchschnitt aus den beiden schriftlichen Prüfungen und der Note für die mündliche Beteiligung. Die Durchschnittsnote der beiden schriftlichen Prüfungen wird mit 90%, die Note für die mündliche Beteiligung mit 10% gewichtet.\nFalls jemand eine persönliche Besprechung wünscht,  kann sich hier für eine Sprechstunde anmelden (Rent a Mock)."
  },
  {
    "objectID": "files/lektionen_hs25/250702_systemeinrichtung/setup.html",
    "href": "files/lektionen_hs25/250702_systemeinrichtung/setup.html",
    "title": "Arbeitsumgebung (Arbeiten mit Jupyter Notebooks)",
    "section": "",
    "text": "In der Informatik geht es darum, wie Informationsverarbeitung mit Hilfe von Computern automatisiert werden kann.\nDie Automatisierung der Informationsverarbeitung erfordert die Verwendung von Programmiersprachen. Im Informatikunterricht wird in erster Linie mit der Programmiersprache Python gearbeitet.\nIm folgenden findet sich eine Anleitung für die Installation der für den Unterricht erforderlichen Programme."
  },
  {
    "objectID": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#ausgangslage",
    "href": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#ausgangslage",
    "title": "Arbeitsumgebung (Arbeiten mit Jupyter Notebooks)",
    "section": "",
    "text": "In der Informatik geht es darum, wie Informationsverarbeitung mit Hilfe von Computern automatisiert werden kann.\nDie Automatisierung der Informationsverarbeitung erfordert die Verwendung von Programmiersprachen. Im Informatikunterricht wird in erster Linie mit der Programmiersprache Python gearbeitet.\nIm folgenden findet sich eine Anleitung für die Installation der für den Unterricht erforderlichen Programme."
  },
  {
    "objectID": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#installation-von-python",
    "href": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#installation-von-python",
    "title": "Arbeitsumgebung (Arbeiten mit Jupyter Notebooks)",
    "section": "Installation von Python",
    "text": "Installation von Python\nDieser Abschnitt führt Sie Schritt für Schritt durch die Installation von Python auf einem Windows-Rechner.\n\n\n\n\n\n\nMicrosoft Store Falle\n\n\n\nAchten Sie beim Herunterladen von Python darauf, dass Sie sich auf der offiziellen Seite von Python (https://www.python.org) und nicht im Microsoft Store befinden. Wenn Sie versehentlich die Python Version aus dem Microsoft Store installiert haben, kann das bei der Arbeit an den Schulprojekten zu Problemen führen.\nDeinstallieren Sie die Microsoft Version von Python und installieren Sie die Version von der offiziellen Website.\n\n\n\nLaden Sie die neueste Version von Python von der offiziellen Website herunter: python.org.\nFühren Sie das heruntergeladene Installationsprogramm durch Doppelklick auf die Datei aus. Stellen Sie sicher, dass Sie die Option “Add Python to PATH” aktivieren, bevor Sie auf “Install Now” klicken.\n\n\n\n\n\n\nDie ‘PATH’-Umgebungsvariable\n\n\n\nStellen Sie sich die PATH-Variable wie ein Adressbuch für die Kommandozeile (Terminal) vor. Wenn Sie einen Befehl wie python eingeben, schaut der Computer in diesem Adressbuch nach, wo das entsprechende Programm zu finden ist.\nIndem Sie das Häkchen bei “Add Python to PATH” setzen, fügen Sie die Adresse des Python-Interpreters zu diesem Adressbuch hinzu. Ohne diesen Eintrag weiss der Computer nicht, wo er suchen soll, und meldet, dass er den Befehl nicht kennt.\n\n\nÜberprüfen Sie die Installation, indem Sie die Eingabeaufforderung öffnen (Terminal \\(\\rightarrow\\) Windows-Taste + R, dann cmd eingeben) und den Befehl python --version eingeben. Dies sollte die installierte Python-Version anzeigen."
  },
  {
    "objectID": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#hello-world",
    "href": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#hello-world",
    "title": "Arbeitsumgebung (Arbeiten mit Jupyter Notebooks)",
    "section": "Hello World",
    "text": "Hello World\nEs hat sich eingebürgert, dass das erste Programm, das ausgeführt wird, ein Programm ist, das den Text “Hello World” auf dem Bildschirm ausgibt. Um dieser Tradition zu folgen, führen Sie die folgenden Schritte aus:\n\nÖffnen Sie ein Terminal (Windows-Taste + R, dann cmd eingeben).\n\n\n\n\n\n\nDas Terminal\n\n\n\nUnter dem Begriff “Terminal” versteht man ein Programm, das eine textbasierte Benutzeroberfläche bereitstellt, um mit dem Betriebssystem zu interagieren. In einem Terminal können Sie Befehle eingeben und erhalten die Ausgaben direkt im Fenster.\n\n\nGeben Sie den Befehl python ein, um die Python-Shell zu starten. Die Python Shell sollte ungefähr so, wie das folgende Bild aussehen.\n\n\n\nPython Shell\n\n\nGeben Sie den folgenden Befehl ein und drücken Sie anschliessend die Eingabetaste:\nprint(\"Hello World\")\nDas Resultat sollte wie das folgende Bild aussehen.\n\n\n\nPython Shell\n\n\n\nGratuliere - Sie haben Ihr erstes Python-Programm erfolgreich ausgeführt!"
  },
  {
    "objectID": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#arbeitsumgebung",
    "href": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#arbeitsumgebung",
    "title": "Arbeitsumgebung (Arbeiten mit Jupyter Notebooks)",
    "section": "Arbeitsumgebung",
    "text": "Arbeitsumgebung\nIm Unterricht wird nicht direkt in der Python-Shell gearbeitet, sondern mit sogenannten Jupyter Notebooks. Jupyter Notebooks ermöglichen es, in der gleichen Datei sowohl Code (Programm Teile) als auch formatierten Text (in Markdown) zu verarbeiten. Eine Jupyter Notebook Datei hat die Endung .ipynb. Vom Jupyter Notebook unterschieden werden muss die Arbeitsoberfläche in welcher die Jupyter Notebooks bearbeitet werden. Diese Oberfläche nennt sich JupyterLab und läuft in einem Webbrowser.\n\n\n\n\n\n\nDas Jupyter Ökosystem\n\n\n\nDie im Unterricht verwendeten Jupyter Notebooks sind Teil eines ganzen Jupyter Ökosystems. Der Name Jupyter setzt sich aus den drei Programmiersprachen Julia, Python und R zusammen, die in diesem Ökosystem eine zentrale Rolle spielen. Zum Jupyter Ökosystem gehören auch zahlreiche Erweiterungen und Tools, die die Arbeit mit Notebooks und Daten erleichtern.\nDer Unterricht beschränkt sich auf die Verwendung von Jupyter Notebooks mit der Programmiersprache Python sowie den Einsatz von JupyterLab als Arbeitsumgebung.\n\n\nDamit dies alles funktioniert, braucht es ein paar weitere Vorbereitungsarbeiten.\n\nErstellen Sie im Ordner “Informatik” einen Unterordner mit dem Heutigen Datum als Namen. Formatieren Sie das Datum nach dem Schema “YYMMDD”, für den 1. August 2025 wäre das zum Beispiel “250801”.\nÖffnen Sie den soeben erstellten Ordner.\nGeben Sie die Tastenfolge Ctrl + L ein, um die Adresszeile des Dateimanagers zu aktivieren.\nÜberschreiben Sie den Inhalt der Adresszeile mit dem Text cmd und drücken Sie die Eingabetaste. Dadurch wird ein Terminal geöffnet, das direkt im aktuellen Ordner arbeitet.\nGeben Sie im neu geöffneten Terminal den folgenden Befehl ein und drücken Sie die Eingabetaste:\npython -m venv .venv\nDadurch wird eine sogenannte Python Virtual Environment erstellt (venv wegen Virtual Environment). Dieses Python Virtual Environment dient dazu, die eigenen Programmierprojekte unabhängig voneinander gestalten zu können.\nAktivieren Sie das Python Virtual Environment mit dem folgenden Befehl:\n .venv\\Scripts\\activate\nIhr Terminal sieht nach dem Erstellen und Aktivieren der Python Virtual Environment ungefähr so aus:\n\n\n\nAktivierte Python Virtual Environment\n\n\nDas Wort in der Klammer am Anfang der Zeile zeigt den Namen der aktiven Python Virtual Environment an. Im vorliegenden Fall ist das .venv.\nIn der nun aktivierten Python Virtual Environment installieren Sie die benötigten Pakete mit dem folgenden Befehl:\npip install jupyter\nDas dauert eine Weile.\nWährend der Installation werden die benötigten Pakete (Ergänzungen zur bestehenden Python Installation) heruntergeladen und in der Python Virtual Environment gespeichert. Das Terminal sieht dabei ungefähr so aus:\n\n\n\nTerminal während der Jupyter Installation\n\n\nAlle in einer Python Virtual Environment installierten Pakete sind innerhalb dieser Umgebung dauerhaft verfügbar und müssen daher für das gleiche Projekt kein zweites Mal installiert werden.\nStarten Sie den Jupyter Server mit dem folgenden Befehl:\n jupyter-lab\nDies startet den Jupyter Notebook Server und öffnet automatisch ein Browserfenster mit der Jupyter Notebook Oberfläche.\n\n\n\nStartseite Jupyter Lab\n\n\nKlicken Sie auf den Button “Python 3 (ipykernel)” unter dem Titel Notebook.\nDamit starten Sie ein neues Jupyter Notebook. Der Cursor blinkt in einer leeren Zelle. Bei dieser Zelle handelt es sich um eine sogenannte Code-Zelle. In einer Code-Zelle können Sie Python Code eingeben und ausführen.\nÜberprüfen Sie das, indem Sie in der Zelle den Befehl print(\"Hello World\") eingeben und anschliessend die Tastenfolge Shift + Enter drücken (alternativ können Sie auch auf den Button “Run” in der Werkzeugleiste klicken).\nDas Resultat sollte wie das folgende Bild aussehen.\n\n\n\nHello World in einem Jupyter Notebook\n\n\nIn einem Jupyter Notebook können Sie nicht nur Python Code ausführen, sondern auch Text (formatiert in Markdown) darstellen.\nFür die Darstellung von Text müssen Sie die Zelle als Text-Zelle markieren. Dazu klicken Sie auf den Button “Code” in der Werkzeugleiste und wählen im Dropdown-Menü die Option “Markdown” aus.\n\n\n\nUmstellen der Zelle auf Markdown\n\n\nProbieren Sie das aus. Schreiben Sie einen Titel und einen kurzen Text in die Zelle unterhalb der Code-Zelle mit pringt(\"Hello World\"). Damit der Text in der Zelle formatiert angezeigt wird, müssen Sie die Zelle mit der Tastenfolge Shift + Enter ausführen (analog zum Ausführen von Code-Zellen).\nEine Zelle ist entweder eine Code-Zelle oder eine Text-Zelle. Für den Wechsel zwischen Code- und Text-Darstellung müssen Sie je eine neue Zelle anlegen. Das geht mit der Tastenfolge Esc + B (für “Below”) oder Esc + A (für “Above”) während Sie sich in einer Zelle befinden. Alternativ können Sie auch die Buttons “Insert Cell Below” oder “Insert Cell Above” aus den Werkzeugen der Zelle verwenden.\nDas Jupyter Notebook ist eine Datei mit der Endung .ipynb. Neu erstellte Jupyter Notebooks erhalten den Namen “Untitled.ipynb”. Um diesen Namen zu ändern, klicken Sie mit der rechten Maustatste auf den Titel “Untitled” in der oberen linken Ecke des Jupyter Notebooks und wählen Sie die Option “Rename” aus dem Kontextmenü. Anschliessend können Sie den Namen des Jupyter Notebooks eingeben."
  },
  {
    "objectID": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#öffnen-bestehender-jupyter-notebooks",
    "href": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#öffnen-bestehender-jupyter-notebooks",
    "title": "Arbeitsumgebung (Arbeiten mit Jupyter Notebooks)",
    "section": "Öffnen bestehender Jupyter Notebooks",
    "text": "Öffnen bestehender Jupyter Notebooks\nHäufiger als das Erstellen eines neuen Jupyter Notebooks ist das Öffnen eines bereits bestehenden Jupyter Notebooks. Hier wird das entsprechende Vorgehen beschrieben.\n\nNavigieren Sie in den Ordner in dem sich das Jupyter Notebook befindet.\nStellen Sie sicher, dass der Ordner über eine Python Virtual Environment mit installierten Jupyter Paketen verfügt.\nÖffnen Sie dazu im ausgewählten Ordner das Terminal (ctrl + L anschliessend cmd und Eingabetaste). Dann starten Sie die Python Virtual Environment und geben den Befehl pip list ein. Dieser Listet alle in der Python Virtual Environment installierten Pakete auf. Falls die Jupyter Pakete nicht aufgelistet werden, müssen Sie diese wie oben beschrieben installieren.\nStarten Sie den Jupyter Server mit dem Befehl jupyter-lab.\nÖffnen Sie das Dateiverzeichnis. Dazu müssen Sie auf dem linken Rand das Ordner-Symbol anklicken.\nWählen Sie das Jupyter Notebook aus, das Sie öffnen möchten. Mit einem Doppelklick auf das Jupyter Notebook wird dieses geöffnet.\nWenn Sie das Dateiverzeichnis wieder schliessen möchten, klicken Sie auf das Ordner-Symbol auf der linken Seite erneut.\n\nDiese Schritte funktionieren auch, wenn Sie ein Jupyter Notebook öffnen möchten, das Sie von jemand anderem erhalten haben. Sie müssen dieses dazu lediglich in den Ordner kopieren, in dem sich die Python Virtual Environment mit den installierten Jupyter Paketen befindet."
  },
  {
    "objectID": "files/HS_25.html",
    "href": "files/HS_25.html",
    "title": "Unterlagen für das Herbstsemester 2025/2026",
    "section": "",
    "text": "Sortieren nach\n      Voreinstellung\n      \n        Datum - Datum (aufsteigend)\n      \n      \n        Datum - Neueste\n      \n      \n        Titel\n      \n      \n        Autor:in\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDatum\n\n\n\nTitel\n\n\n\nAutor:in\n\n\n\n\n\n\n\n\n28.06.2025\n\n\nSpeicherorganisation\n\n\nJacques Mock Schindler\n\n\n\n\n\n\n25.08.2025\n\n\nArbeitsumgebung (Arbeiten mit Jupyter Notebooks)\n\n\nJacques Mock Schindler\n\n\n\n\n\n\n01.09.2025\n\n\nProblemlösung in der Informatik\n\n\nJacques Mock Schindler\n\n\n\n\n\n\n07.09.2025\n\n\nProblemlösung in der Informatik (Musterlösung)\n\n\nJacques Mock Schindler\n\n\n\n\n\n\n08.09.2025\n\n\nVorbemerkungen: Python als Rechner\n\n\nJacques Mock Schindler\n\n\n\n\n\n\n15.09.2025\n\n\nWiederholungen in Python (Übung)\n\n\nJacques Mock Schindler\n\n\n\n\n\n\n15.09.2025\n\n\nWiederholungen in Python (For-Loops)\n\n\nJacques Mock Schindler\n\n\n\n\n\n\nKeine Treffer"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "files/lektionen_hs25/250628_speicher/speicherorganisation.html",
    "href": "files/lektionen_hs25/250628_speicher/speicherorganisation.html",
    "title": "Speicherorganisation",
    "section": "",
    "text": "Informationen sind in Computern in Dateien gespeichert. Die gespeicherten Informationen können dabei ganz unterschiedlicher Art, wie zum Beispiel Texte, Bilder oder Videos, sein.\nAls Modell, wie man sich Dateien vorstellen kann, hat sich das Bild von Dossiers in Ordnern etabliert. Die einzelnen Dossiers sind die Dateien und die Ordner sind die Strukturen, in denen die Dateien abgelegt sind. Diese Konstruktion kann über mehrere Ebenen hinaus verschachtelt werde (Ordner in Gestellen, die wiederum in einzelnen Räumen stehen, etc.)."
  },
  {
    "objectID": "files/lektionen_hs25/250628_speicher/speicherorganisation.html#dateinamen-und-pfade",
    "href": "files/lektionen_hs25/250628_speicher/speicherorganisation.html#dateinamen-und-pfade",
    "title": "Speicherorganisation",
    "section": "Dateinamen und Pfade",
    "text": "Dateinamen und Pfade\nDamit Dateien identifiziert und gefunden werden können, müssen sie einen Namen haben. Grundsätzlich gibt es keine Einschränkungen, wie Dateien benannt werden. Die meisten Dateinamen bestehen allerdings aus zwei Teilen: dem eigentlichen Dateinamen und der Dateinamenserweiterung.\nDer eigentliche Dateiname wird idealerweise so festgelegt, dass er einen Rückschluss auf den Inhalt der Datei zulässt.\nDie Dateinamenserweiterung ist ein Zusatz, der Auskunft über den Dateityp gibt. Sie steht hinter einem Punkt hinter dem eigentlichen Dateinamen. Auf Windows Rechnern wird die Dateinamenserweiterung im Dateimanager in der Standardeinstellung nicht angezeigt. Um dies zu ändern, muss in den Einstellungen des Dateimanagers die Option “Dateinamenerweiterungen anzeigen” aktiviert werden (Ansicht &gt; Anzeigen &gt; Dateinamenserweiterung).\nDamit Dateien besser ausgetauscht werden können, empfiehlt es sich, für die Namen lediglich Buchstaben, Zahlen und Unterstriche (sog. ASCII-Zeichen) zu verwenden.\nDamit man Dateien finden kann, muss man wissen, wo sie abgelegt worden sind. Übertragen auf das Modell von Dossiers in Ordnern bedeutet das, zu wissen, welches Dossier in welchem Ordner in welchem Gestell in welchem Raum abgelegt ist. Wie in einem realen Archiv, geht man dabei vom Raum zum Gestell, zum Ordner und schliesslich zum Dossier. In der Informatik wird dieser Weg als Pfad bezeichnet. Auf einem Windows-Rechner beginnt dieser Pfad mit dem sogenannten Laufwerksbuchstaben, gefolgt von einem Doppelpunkt und einem Backslash (\\). Aus historischen Gründen ist der Laufwerksbuchstabe auf Windows-Rechnern Standardmässig der Buchstabe C.\nEin Beispiel für einen Pfad könnte so aussehen:\nC:\\Users\\fritz\\Documents\\text.docx\nIn diesem Beispiel ist C: der Laufwerksbuchstabe, Users der Ordner, fritz der Unterordner, Documents der Unterordner von fritz und text.docx die Datei, die im Ordner Documents abgelegt ist. Users ist ein von Windows standardmässig angelegter Ordner, in dem die persönlichen Daten der Benutzer abgelegt werden. Der Ordner fritz ist der persönliche Ordner des Benutzers fritz. Der Ordner Documents wird ebenfalls standardmässig von Windows im Ordner jedes Benutzers angelegt. Dem Benutzer fritz steht es frei, diesen Ordner zu verwenden und darin Dateien oder Underordner anzulegen.\nDer Dateiname text.docx verweist mit seiner Dateinamenserweiterung .docx auf eine Datei, die mit dem Programm Microsoft Word erstellt worden ist."
  },
  {
    "objectID": "files/lektionen_hs25/250628_speicher/speicherorganisation.html#dateien-in-der-cloud",
    "href": "files/lektionen_hs25/250628_speicher/speicherorganisation.html#dateien-in-der-cloud",
    "title": "Speicherorganisation",
    "section": "Dateien in der Cloud",
    "text": "Dateien in der Cloud\nDateien können nicht nur lokal auf dem Computer gespeichert werden. Damit von überall und jederzeit auf Dateien zugegriffen werden kann, werden Dateien in der Cloud gespeichert. Dabei handelt es sich um Server in Rechenzentren, die über das Internet erreichbar sind. Beispiele für solche Cloud-Dienst sind OneDrive von Microsoft oder Google Drive.\nAblageorte auf OneDrive werden in Windows direkt in der Verzeichnisstruktur des Betriebssystems angezeigt, solche von Google erhalten auf Windows einen eigenen Laufwerksbuchstaben (G:\\).\nDamit auf die Dateien in der Cloud zugegriffen werden kann, ist eine Internetverbindung erforderlich."
  },
  {
    "objectID": "files/lektionen_hs25/250628_speicher/speicherorganisation.html#dateistruktur-für-die-schule",
    "href": "files/lektionen_hs25/250628_speicher/speicherorganisation.html#dateistruktur-für-die-schule",
    "title": "Speicherorganisation",
    "section": "Dateistruktur für die Schule",
    "text": "Dateistruktur für die Schule\nFür den schulischen Bedarf erscheint es sinnvoll eine Dateistruktur nach Fächern anzulegen. Im Ordner Documents wird dazu für jedes Fach ein eigener Unterordner angelegt. Innerhalb der jeweiligen Fachordner kann eine weitere Struktur nach Semester oder nach Thema sinnvoll sein. Ein Beispiel für die Ordnerstruktur eines Erstklässlers an der KBW kann so aussehen:\nDocuments\\\n         ├──Schule\\\n         |       ├──Deutsch\n         |       ├──Franz\n         |       ├──Mathe\n         |       ├──WR\n         |       └──...\n         ├──Privat\\\n         |       ├──Rechnungen\n         |       └──..."
  },
  {
    "objectID": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-tricolore",
    "href": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-tricolore",
    "title": "Problemlösung in der Informatik",
    "section": "Beispiel: Tricolore",
    "text": "Beispiel: Tricolore\nDie Vorgehensweise wird anhand der Französischen Nationalflagge (Tricolore) gezigt.\n\nUm die Zeichnung der Tricolore zu planen, wird die Grafik in ihre Einzelteile zerlegt.\nDie Tricolore besteht aus drei gleich grossen Rechtecken in den Farben blau, rot und weiss. Diese Rechtecke werden nebeneinander angeordnet.\nDas bedeutet, dass die Länge und die Breite der Rechtecke definiert werden muss und basierend auf diesen Werten die drei Rechtecke gezeichnet werden. Anschliessend werden die drei Rechtecke nebeneinander angeordnet.\nDer Befehl zum Zeichnen eines Rechtecks lautet\nname = rechteck(länge, breite, farbe)\nBevor die Zeichnung tatsächlich erstellt wird, soll hier der Befehl im Detail erklärt werden:\n\nname ist der Name, unter dem das Rechteck gespeichert wird. Dieser Name kann später verwendet werden, um auf das Rechteck zuzugreifen.\nrechteck ist der Befehl, der ein Rechteck zeichnet. In der Klammer hinter dem Befehl werden die sogenannten Argumente angegeben. Diese steuern, wie das Rechteck aussieht.\nlänge und breite sind die Argumente, die die Grösse des Rechtecks bestimmen. Diese Werte können beliebig gewählt werden.\nfarbe ist das Argument, das die Farbe des Rechtecks bestimmt. Aufgrund der Eigenheiten von PyTamaro können ausschliesslich die Farben verwendet werden, welche importiert worden sind.\n\n\nRechtecke zeichnen\nAls erstes wird hier gezeigt, wie das blaue Rechteck gezeichnetwird.\nDamit das Resultat kontrolliert werden kann, wird die Grafik mit dem Befehl\nzeige_grafik(name)\nangezeigt.\n\nbleu = rechteck(50, 100, blau)\nzeige_grafik(bleu)\n\n\n\n\n\n\n\n\nNachdem das blaue Rechteck gezeichnet wurde, kann das weisse und das rote Rechteck analog gezeichnet und angzeigt werden.\n\n# TODO: Rechtecke blanc und rouge zeichnen -&gt; Schreiben Sie hier Ihren\n# Code\nblanc = rechteck(50, 100, weiss)\nrouge = rechteck(50, 100, rot)\n\nAls nächstes werden die drei Rechtecke nebeninander angeordnet. Dazu wird der Befehl neben verwendet. Dieser Befehl nimmt zwei Argumente entgegen: das erste Rechteck und das zweite Rechteck. Das erste Rechteck wird links vom zweiten Rechteck gezeichnet.\nresultat = neben(linke grafik, rechte grafik)\n\nzwei_drittel = neben(bleu, blanc)\nzeige_grafik(zwei_drittel)\n\n\n\n\n\n\n\n\nAnalog können Sie nun das rote Rechteck rechts der zwei Drittel anordnen. Nennen Sie das Resultat tricolore und zeigen Sie es an.\n\n# TODO: Trcolore zusammenfügen -&gt; Schreiben Sie hier Ihren\n# Code"
  },
  {
    "objectID": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-österreichische-flagge",
    "href": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-österreichische-flagge",
    "title": "Problemlösung in der Informatik",
    "section": "Beispiel: Österreichische Flagge",
    "text": "Beispiel: Österreichische Flagge\nZeichnen Sie die Österreichische Flagge. Das Seitenverhältnis der Flagge ist 2:3.\n\nUm Elemente übereinander anzuordnen, wird der Befehl ueber verwendet. Die Syntax dieses Befehls lautet:\nresultat = ueber(obere grafik, untere grafik)\n\n# TODO: Östereichische Flagge zeichnen -&gt; Schreiben Sie hier Ihren\n# Code"
  },
  {
    "objectID": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-schweizerfahne",
    "href": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-schweizerfahne",
    "title": "Problemlösung in der Informatik",
    "section": "Beispiel: Schweizerfahne",
    "text": "Beispiel: Schweizerfahne\nZeichnen Sie eine korrekt propotionierte Schweizerfahne. Die Dimensionen können Sie der folgenden Grafik entnehmen:\n\nVerwenden Sie dazu die Befehle rechteck, drehe und ueberlagere.\n\n# TODO: Schweizerfahne zeichnen -&gt; Schreiben Sie hier Ihren\n# Code"
  },
  {
    "objectID": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-tessiner-wappen",
    "href": "files/lektionen_hs25/250901_probleme/probleme.html#beispiel-tessiner-wappen",
    "title": "Problemlösung in der Informatik",
    "section": "Beispiel: Tessiner Wappen",
    "text": "Beispiel: Tessiner Wappen\nAls Referenz an die USI zeichnen Sie als letztes Beispiel das Tessiner Wappen.\n\nVerwenden Sie dazu neben den bereits bekannten Befehlen zusätzlich die Befehle ueber und kreis_sektor.\n\n# TODO: Tessiner Wappen zeichnen -&gt; Schreiben Sie hier Ihren\n# Code"
  },
  {
    "objectID": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#häufige-fehlermeldungen",
    "href": "files/lektionen_hs25/250702_systemeinrichtung/setup.html#häufige-fehlermeldungen",
    "title": "Arbeitsumgebung (Arbeiten mit Jupyter Notebooks)",
    "section": "Häufige Fehlermeldungen",
    "text": "Häufige Fehlermeldungen\n\n                \n        \n        \n            \n\n\n\n\n\n\n\n\nProblem / Fehlermeldung (Was Sie sehen)\nMögliche Ursache (Warum es passiert)\nLösung (Was Sie tun können)\n\n\n\n\nDer Befehl python ist entweder falsch geschrieben oder konnte nicht gefunden werden.\nPython wurde bei der Installation nicht zur PATH-Variable hinzugefügt. Der Computer weiss nicht, wo er python.exe finden soll.\n\nDeinstallieren Sie Python über die Systemsteuerung.\nInstallieren Sie Python erneut.\nAchten Sie diesmal unbedingt darauf, das Häkchen bei \"Add Python to PATH\" zu setzen.\n\n\n\nDer Befehl jupyter-lab ist entweder falsch geschrieben oder konnte nicht gefunden werden.\nSie haben vergessen, die virtuelle Umgebung zu aktivieren. Der Befehl jupyter-lab existiert nur innerhalb der aktivierten Umgebung.\n\nÜberprüfen Sie, ob (.venv) am Anfang der Kommandozeile steht.\nFalls nicht, führen Sie den Aktivierungsbefehl erneut aus: .venv\\Scripts\\activate.\n\n\n\nImportError: DLL load failed... oder ähnliche Fehler unter Windows\nEin häufiges Problem mit der Installation von pywin32, einer wichtigen Windows-Bibliothek, die von Jupyter benötigt wird.\n\nStellen Sie sicher, dass Ihre virtuelle Umgebung aktiv ist.\nFühren Sie den Befehl pip install --upgrade pywin32 aus, um die Bibliothek zu reparieren.\n\n\n\nKernel Error oder der Status \"Kernel starting, please wait...\" ändert sich nicht\nDie Verbindung zwischen der Browser-Oberfläche und dem Python-\"Gehirn\" (dem Kernel) ist gestört. Dies kann viele Ursachen haben.\n\nDer einfachste erste Schritt: Klicken Sie im JupyterLab-Menü auf \"Kernel\" -&gt; \"Restart Kernel...\".\nWenn das nicht hilft, schliessen Sie JupyterLab im Terminal (mit der Tastenkombination Strg + C) und starten Sie es mit jupyter-lab neu.\n\n\n\nPermission denied (Zugriff verweigert) bei der Installation von Paketen\nSie versuchen, Pakete an einem systemweiten Ort zu installieren (z. B. in C:\\Program Files), für den Sie keine Schreibrechte haben.\nDies ist genau das Problem, das virtuelle Umgebungen lösen! Stellen Sie sicher, dass Ihre venv aktiv ist ((.venv) muss sichtbar sein). Dadurch wird sichergestellt, dass alle Pakete lokal in Ihren Projektordner installiert werden, wo Sie die vollen Rechte haben."
  },
  {
    "objectID": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-tricolore",
    "href": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-tricolore",
    "title": "Problemlösung in der Informatik (Musterlösung)",
    "section": "Beispiel: Tricolore",
    "text": "Beispiel: Tricolore\nDie Vorgehensweise wird anhand der Französischen Nationalflagge (Tricolore) gezigt.\n\nUm die Zeichnung der Tricolore zu planen, wird die Grafik in ihre Einzelteile zerlegt.\nDie Tricolore besteht aus drei gleich grossen Rechtecken in den Farben blau, rot und weiss. Diese Rechtecke werden nebeneinander angeordnet.\nDas bedeutet, dass die Länge und die Breite der Rechtecke definiert werden muss und basierend auf diesen Werten die drei Rechtecke gezeichnet werden. Anschliessend werden die drei Rechtecke nebeneinander angeordnet.\nDer Befehl zum Zeichnen eines Rechtecks lautet\nname = rechteck(länge, breite, farbe)\nBevor die Zeichnung tatsächlich erstellt wird, soll hier der Befehl im Detail erklärt werden:\n\nname ist der Name, unter dem das Rechteck gespeichert wird. Dieser Name kann später verwendet werden, um auf das Rechteck zuzugreifen.\nrechteck ist der Befehl, der ein Rechteck zeichnet. In der Klammer hinter dem Befehl werden die sogenannten Argumente angegeben. Diese steuern, wie das Rechteck aussieht.\nlänge und breite sind die Argumente, die die Grösse des Rechtecks bestimmen. Diese Werte können beliebig gewählt werden.\nfarbe ist das Argument, das die Farbe des Rechtecks bestimmt. Aufgrund der Eigenheiten von PyTamaro können ausschliesslich die Farben verwendet werden, welche importiert worden sind.\n\n\nRechtecke zeichnen\nAls erstes wird hier gezeigt, wie das blaue Rechteck gezeichnetwird.\nDamit das Resultat kontrolliert werden kann, wird die Grafik mit dem Befehl\nzeige_grafik(name)\nangezeigt.\n\nbleu = rechteck(50, 100, blau)\nzeige_grafik(bleu)\n\n\n\n\n\n\n\n\nNachdem das blaue Rechteck gezeichnet wurde, kann das weisse und das rote Rechteck analog gezeichnet und angzeigt werden.\n\n# TODO: Rechtecke blanc und rouge zeichnen -&gt; Schreiben Sie hier Ihren\n# Code\nblanc = rechteck(50, 100, weiss)\nrouge = rechteck(50, 100, rot)\n\nAls nächstes werden die drei Rechtecke nebeninander angeordnet. Dazu wird der Befehl neben verwendet. Dieser Befehl nimmt zwei Argumente entgegen: das erste Rechteck und das zweite Rechteck. Das erste Rechteck wird links vom zweiten Rechteck gezeichnet.\nresultat = neben(linke grafik, rechte grafik)\n\nzwei_drittel = neben(bleu, blanc)\nzeige_grafik(zwei_drittel)\n\n\n\n\n\n\n\n\nAnalog können Sie nun das rote Rechteck rechts der zwei Drittel anordnen. Nennen Sie das Resultat tricolore und zeigen Sie es an.\n\n# TODO: Trcolore zusammenfügen -&gt; Schreiben Sie hier Ihren\n# Code\ntricolore = neben(zwei_drittel, rouge)\nzeige_grafik(tricolore)"
  },
  {
    "objectID": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-österreichische-flagge",
    "href": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-österreichische-flagge",
    "title": "Problemlösung in der Informatik (Musterlösung)",
    "section": "Beispiel: Österreichische Flagge",
    "text": "Beispiel: Österreichische Flagge\nZeichnen Sie die Österreichische Flagge. Das Seitenverhältnis der Flagge ist 2:3.\n\nUm Elemente übereinander anzuordnen, wird der Befehl ueber verwendet. Die Syntax dieses Befehls lautet:\nresultat = ueber(obere grafik, untere grafik)\n\n# TODO: Östereichische Flagge zeichnen -&gt; Schreiben Sie hier Ihren\n# Code\nroter_balken = rechteck(90, 20, rot)\nweisser_balken = rechteck(90, 20, weiss)\n\noberer_teil = ueber(roter_balken, weisser_balken)\nosterreichische_flagge = ueber(oberer_teil, roter_balken)\n\nzeige_grafik(osterreichische_flagge)"
  },
  {
    "objectID": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-schweizerfahne",
    "href": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-schweizerfahne",
    "title": "Problemlösung in der Informatik (Musterlösung)",
    "section": "Beispiel: Schweizerfahne",
    "text": "Beispiel: Schweizerfahne\nZeichnen Sie eine korrekt propotionierte Schweizerfahne. Die Dimensionen können Sie der folgenden Grafik entnehmen:\n\nVerwenden Sie dazu die Befehle rechteck, drehe und ueberlagere.\n\n# TODO: Schweizerfahne zeichnen -&gt; Schreiben Sie hier Ihren\n# Code\nhintergrund = rechteck(320, 320, rot)\nweisser_balken = rechteck(200, 60, weiss)\nweisser_balken2 = drehe(90, weisser_balken)\n\nkreuz = ueberlagere(weisser_balken, weisser_balken2)\n\nschweizerfahne = ueberlagere(kreuz, hintergrund)\n\nzeige_grafik(schweizerfahne)"
  },
  {
    "objectID": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-tessiner-wappen",
    "href": "files/lektionen_hs25/250901_musterloesung/musterloesung.html#beispiel-tessiner-wappen",
    "title": "Problemlösung in der Informatik (Musterlösung)",
    "section": "Beispiel: Tessiner Wappen",
    "text": "Beispiel: Tessiner Wappen\nAls Referenz an die USI zeichnen Sie als letztes Beispiel das Tessiner Wappen.\n\nVerwenden Sie dazu neben den bereits bekannten Befehlen zusätzlich die Befehle ueber und kreis_sektor.\n\n# TODO: Tessiner Wappen zeichnen -&gt; Schreiben Sie hier Ihren\n# Code\n\nroter_teil = rechteck(160, 240, rot)\nblauer_teil = rechteck(160, 240, blau)\nroter_sektor = kreis_sektor(160, 90, rot)\nroter_sektor = drehe(180, roter_sektor)\nblauer_sektor = kreis_sektor(160, 90, blau)\nblauer_sektor = drehe(270, blauer_sektor)\n\nti_unten = neben(roter_sektor, blauer_sektor)\nti_oben = neben(roter_teil, blauer_teil)\n\ntessin = ueber(ti_oben, ti_unten)\n\nzeige_grafik(tessin)"
  },
  {
    "objectID": "files/lektionen_hs25/250908_variablen/Variablen.html",
    "href": "files/lektionen_hs25/250908_variablen/Variablen.html",
    "title": "Vorbemerkungen: Python als Rechner",
    "section": "",
    "text": "Python verfügt über eingebaute mathematische Fähigkeiten. Es kann die Grundrechenarten und kennt die Hierarchie der Operationen. Sie können das überprüfen, in dem Sie in der folgenden Zelle die Rechnung \\[2+3\\cdot4\\] ausführen.\n# hier können Sie die Rechnung ausführen\nDie folgende Tabelle gibt einen Überblick über die direkt in Python verfügbaren mathematischen Funktionen:"
  },
  {
    "objectID": "files/lektionen_hs25/250908_variablen/Variablen.html#variablen",
    "href": "files/lektionen_hs25/250908_variablen/Variablen.html#variablen",
    "title": "Vorbemerkungen: Python als Rechner",
    "section": "Variablen",
    "text": "Variablen\nIn Python sind Variablen symbolische Namen für gespeicherte Daten. Variablen verweisen dabei auf den Speicherbereich im Computer, in welchem die entsprechenden Daten physikalisch abgelegt sind. Aus diesem Grund werden Variablen gelegentlich auch als Zeiger bezeichnet. Was genau für Daten in diesem Speicherbereich abgelegt werden, spielt keine Rolle und kann während der Ausführung eines Programmes auch ändern.\nIn Python werden Variablen Werte mit dem Gleichheitszeichen zugewiesen. Um der Variable \\(x\\) den Wert \\(2\\) zuzuweisen, ist die Eingabe x = 2 erfoderlich. Die Variable muss links vom Gleichheitszeichen, der zuzuweisende Wert rechts davon stehen.\nÜberprüfen Sie dies, indem Sie in der folgenden Zelle der Variabel \\(y\\) den Wert \\(3\\) und der Variabel \\(z\\) den Wert \\(4\\) zuweisen. Anschliessend multiplizieren Sie die beiden Variablen miteinander.\n\n# hier die Aufgabe einfüllen\n\nWenn Variablen neue Werte zugewiesen werden, wird die Referenz auf den Speicherbereich mit dem alten Wert gelöscht. Die Daten, welche ohne Verweis durch eine Variable im Speicher liegen, werden vom in Python eingebauten Garbage Collector im Hintergrund gelöscht und der so freigewordene Speicherplatz kann wieder verwendet werden.\nSie können überprüfen, dass Variablen neue Werte zugewiesen werden können, indem Sie in der untenstehenden Zelle die Variabeln \\(y\\) und \\(z\\) addieren. Sie erhalten dann das Resultat \\(7\\). Das heisst, den Variablen \\(y\\) und \\(z\\) sind immer noch die Werte \\(3\\) und \\(4\\) zugewiesen.\n\n# addieren Sie hier y und z\n\nWenn Sie in der folgenden Zelle der Variabel \\(y\\) den Wert \\(5\\) zuweisen und anschliessend \\(y\\) und \\(z\\) addieren erhalten Sie als neues Resultat \\(9\\).\n\n# weisen Sie hier y den neuen Wert zu\n\nVariablen können auch Resultate von Berechnungen zugewiesen werden. Ausserdem können Variablen ganze Wörter als Namen haben. Dies ist gegenüber einzelnen Buchstaben vorzuziehen, weil dann aussagekräftige Namen gewählt werden können. Grundsätzich sind die Namen von Variabeln frei wählbar. Es gibt allerdings eine Reihe von reservierten Begriffen, welche in der Programmiersprache Python eine eigene Bedeutung haben. Unzulässig sind ausserdem Namen, die mit Ziffern beginnen.\nFür die Darstellung von Namen für Variablen hat sich in Python eingebürgert, Variablen klein zu schreiben und Wörter durch Underlines zu trennen (\\(this\\_is\\_a\\_valid\\_variable\\)). Diese Darstellung nennt sich Snake Case. Zudem werden Variablen meist mit englischen Begriffen bezeichnet.\nWeisen Sie in der nächsten Zelle der Variable result das Resultat der Rechnung \\(y + z\\) zu und geben Sie das Resultat mit print(result) aus. print() ist eine Funktion, die Python zur Verfügung stellt. Was Funktionen sind, wird im nächsten Abschnitt erklärt.\n\n# weisen Sie hier der Variable result das Resultat zu"
  },
  {
    "objectID": "files/lektionen_hs25/250908_variablen/Variablen.html#funktionen-in-python",
    "href": "files/lektionen_hs25/250908_variablen/Variablen.html#funktionen-in-python",
    "title": "Vorbemerkungen: Python als Rechner",
    "section": "Funktionen in Python",
    "text": "Funktionen in Python\nPython verfügt über viele bereits vordefinierte Funktionen. Die oben verwendete Funktion print() ist ein Beispiel dafür. Um zu demonstrieren, wie Funktionen in Python definiert werden, zeige ich Ihnen als Beispiel eine Funktion, mit der zwei Zahlen addiert werden.\n\n# Definition der Funktion\ndef get_sum(x, y):\n    return x + y\n\n# Aufruf der Funktion\nresult = get_sum(3,4)\n# Ausgabe des Resultats des Funktionsaufrufs\nprint(result)\n\ndef ist das Schlüsselwort für die Definition einer Funktion. get_sum ist der von mir gewählte Name dieser Funktion. Für die Wahl des Namens einer Funktion gelten die gleichen Regeln, wie für Variablen. In den Klammern stehen die sogenannten Parameter, welche der Funktion übergeben werden, damit sie etwas damit macht. Mit dem Doppelpunkt wird die Signatur der Funktion abgeschlossen. Die Signatur zeigt idealerweise, was eine Funktion womit macht. Sie gibt aber keine Auskunft darüber, wie sie das macht.\nPython gruppiert Befehle, die zusammengehören, durch die gleiche Tiefe der Einrückung. Eine Einrückung hat üblicherweise die Tiefe von vier Leerzeichen. Im Beispiel oben gibt es nur eine eingerückte Zeile, weil die Funktion nur aus einem Befehl besteht. Mit return gibt die Funktion das Resultat zurück.\nIm Beispiel wird das Resultat der Berechnung, welche die Funktion ausführt der Variable result zugewiesen. Der Wert der Variable result wird mit print(result) ausgegeben.\nDefinieren Sie in der folgenden Zelle eine Funktion, mit der zwei Zahlen multipliziert werden.\n\n# hier kommt Ihre Funktion hin"
  },
  {
    "objectID": "files/lektionen_hs25/250908_variablen/Variablen.html#datentypen",
    "href": "files/lektionen_hs25/250908_variablen/Variablen.html#datentypen",
    "title": "Vorbemerkungen: Python als Rechner",
    "section": "Datentypen",
    "text": "Datentypen\nAls nächstes geht es um die Frage, auf welche Inhalte eine Variable zeigen kann.\nIm Grundsatz kann eine Variable auf beliebige Inhalte verweisen.\nAm einfachsten ist die Verwendung der grundlegenden Datenypen (basic data types), welche Python zur Verfügung stellt. Dies sind (mit ihren englischen Bezeichnungen):\n\nInteger (Ganzzahl)\nFloating-Point Number (Gleitkommazahl)\nComplex Number (komplexe Zahl)\nString (Zeichenkette)\nBoolean Type (Wahrheitswert)\n\nDarüber hinaus ist es möglich, eigene Datentypen zu programmieren. Hier aber zuerst eine Beschreibung der grundlegenden Datentypen von Python.\n\nInteger\nDie Bezeichnung für Integer in Python ist ein kurzes int.\nAnders als in anderen Progammiersprachen gibt es in Python theoretisch keine Beschränkung, wie gross ein Integer sein kann. Die einzige Grenze ist der Speicherplatz des auf dem der Integer gespeichert werden soll.\nWenn einer Variable ein grosser Integer zugewiesen wird, kann dieser zur besseren Lesbarkeit auch mit einem Underline als Tausendertrennzeichen geschrieben werden (100_000).\nUm das Auszuprobieren, weisen Sie in der folgenden Zelle der Variable \\(a\\) den Wert von einer Million und der Variable \\(b\\) den Wert von einer Milliarde zu. Anschliessend addieren Sie \\(a\\) und \\(b\\) und weisen das Resultat der Variable \\(big\\_sum\\) zu. Zum Schluss geben Sie den Wert von \\(big\\_sum\\) mit der Funktion print() aus.\n\n# hier können Sie Ihre Berechnung vornehmen\n\nEingegebene Zahlen werden automatisch als Dezimalzahlen interpretiert.\nIntegers können jedoch auch als Binär-, Oktal- oder Hexadezimalzahlen eingegeben werden. Die Eingabe erfordert dann allerdings ein Präfix, welches das Zahlensysten identifiziert. Die folgende Tabelle stellt die möglichen Präfixe zusammen.\n\n\n\nPräfix\nBedeutung\nBasis\n\n\n\n\n0b (Null + Kleinbuchstabe b)\nBinärzahl\n2\n\n\n0B (Null + Grossbuchstabe B)\n\n2\n\n\n0o (Null + Kleinbuchstabe o)\nOktalzahl\n8\n\n\n0O (Null + Grossbuchstabe O)\n\n8\n\n\n0x (Null + Kleinbuchstabe x)\nHexadezimalzahl\n16\n\n\n0X (Null + Grossbuchstabe X)\n\n16\n\n\n\nIn der folgende Zelle finden Sie ein entsprechendes Beispiel.\nPython kann Integer in verschiedenen Zahlensystemen darstellen. Um das Zahlensystem bei der Zuweisung zu spezifizieren, verwenden Sie die entsprechenden Präfixe. Die folgenden Beispiele zeigen die Zuweisung der Zahlen 10, 8, 255 und 16 in den Zahlensystemen Dezimal, Oktal, Hexadezimal und Binär:\ndezimal      = 10\noktal        = 0o10\nhexadezimal  = 0x10\nbinaer       = 0b10\nDie Anzeige der Werte der entsprechenden Variablen erfolgt grundsätzlich im Dezimalsystem.\n\nb = 0b101010\no = 0o52\nx = 0x2a\n\nprint(b, o, x)\n\n\n\nGleitkommazahl\nDie Bezeichnung für Gleitkommazahlen in Python ist float. Python interpretiert Zahlen mit einem Dezimalpunkt als Gleitkommazahlen. Optional können Zahlen mit e oder E in “wissenschaftlicher” Schreibweise eigegeben werden (1000 = 1e3 bzw. 1e-3 = 0.001).\nWeisen Sie in der folgenden Zelle den Variablen million und billionth die passenden Werte in wissenschaftlicher Schreibweise zu.\n\n# hier die Werte den beiden Variablen zuweisen\n\n\n\nKomplexe Zahlen\nPython kann auch mit komplexen Zahlen umgehen. Der Abschnitt zu diesem Thema kann wieder aufgegriffen werden, wenn Sie in Mathe die komplexen Zahlen besprochen haben.\n\n\nString\nZeichenketten (String) werden von Python als str bezeichnet.\nZeichenketten sind beliebige Zeichenfolgen. Damit Python Zeichenketten als solche erkennt, müssen sie durch die Verwendung von einfachen oder doppelten Anführungs- und Schlusszeichen als solche gekennzeichnet werden.\n\"Ich bin eine Zeichenkette.\" oder 'Ich bin auch eine Zeichenkette.'\nWenn man innerhalb einer Zeichenkette Anführungszeichen braucht, müssen die eingrenzenden Anführungszeichen von der “anderen Sorte” sein (\"It's cool learning Python!\" oder 'Der Lehrer sagt: \"Es ist cool Python zu lernen.\"'). Eine andere Möglichkeit reservierte Zeichen zu verwenden ist der Gebrauch eines “escape”-Zeichens. In Python ist das der “backslash” (\\). Die beiden Beispielsätze von vorher hätten entsprechend auch folgendermassen geschrieben werden können:\n'It\\'s cool learning Python!' bzw. \"Der Lehrer sagt: \\\"Es ist cool Python zu lernen.\\\"\"\nDie Länge von Zeichenketten wird lediglich durch die Speicherkapazität des verwendeten Systems begrenzt. Zeichenketten können nicht nur sehr lang, sondern auch leer sein ('').\nZeichenketten können, wie alle Datentypen, Variablen zugewiesen werden. Dies zeigt das folgende Beispiel.\n\n# Zuweisung eines Strings zu einer Variabel\nstandard_greeting = \"Hello World\"\n\n# Ausgabe der Variabel\nprint(standard_greeting)\n\n\n\nBoolean Type\nWahrheitswerte werden in Python als bool bezeichnet. Wahrheitswerte können entweder “wahr” oder “falsch” sein.\nwahr      = True\nfalsch    = False\nDie Ausgabe findet sich in der folgenden Zelle.\n\nwahr      = True\nfalsch    = False\nprint(wahr, falsch)\n\nWelche Warheitswerte sich bei Vergleichen ergeben, kann mit den folgenden Operatoren überprüft werden:\n==   # Gleichheit\n!=   # Ungleichheit\n&gt;    # Größer als\n&lt;    # Kleiner als\n&gt;=   # Größer oder gleich\n&lt;=   # Kleiner oder gleich\n\n# Testen Sie hier den Wahrheitswert von Vergleichen mit Zahlen\n\nWahrheitswerte werden zur Steuerung von Programmflüssen verwendet. Mit einem Wahrheitswert kann zum Beispiel gesteuert werden, wie oft ein Programmteil wiederholt werden soll."
  },
  {
    "objectID": "files/lektionen_hs25/250908_variablen/Variablen.html#funktionen-mit-type-hints",
    "href": "files/lektionen_hs25/250908_variablen/Variablen.html#funktionen-mit-type-hints",
    "title": "Vorbemerkungen: Python als Rechner",
    "section": "Funktionen mit Type-Hints",
    "text": "Funktionen mit Type-Hints\nZum Abschluss komme ich noch einmal auf die Definition von Funktionen zurück. In Python können Variablen - anders als zum Beispiel in Java - beliebige Datentypen zugewiesen werden. Wenn Variablen im Verlauf eines Programms mehrfach verwendet werden, können ihnen auch unterschiedliche Datentypen zugewiesen werden. Dies ist allerdings schlechter Programmierstil.\nAus diesem Grund ist es sinnvoll, bei der Definition einer Funktion zu deklarieren, welche Datentypen die Parameter haben und welcher Datentyp der Rückgabewert hat. Dies soll mit dem Beispiel der Funktion get_quotient verdeutlicht werden.\n\ndef get_quotient(x : int, y : int) -&gt; float:\n    return x / y\n\nHier wird angegeben, dass die Parameter \\(x\\) und \\(y\\) vom Datentyp int sein sollen. Der Datentyp des Rückgabewertes wird hinter -&gt; geschrieben. Im Beispiel ist der Rückgabewert vom Typ float. Das ist so, weil die Funktion zum Beispiel \\(3 / 4 = 3.5\\) rechnet.\nAber Achtung: die Funktion arbeitet auch dann korrekt, wenn ein anderer als der deklarierte Datentyp übergeben wird. Voraussetzung ist lediglich, dass der Datentyp mit den verwendeten Operationen kompatibel ist. Die “Type-Hints” dienen lediglich der besseren Nachvollziehbarkeit, was die Funktion macht."
  },
  {
    "objectID": "files/lektionen_hs25/250915_schlaufen/main.html",
    "href": "files/lektionen_hs25/250915_schlaufen/main.html",
    "title": "Wiederholungen in Python (For-Loops)",
    "section": "",
    "text": "Eine Stärke von Computerprogrammen ist die wiederholte Ausführung von Anweisungen. Viele Programmiersprachen stellen dafür ein Konstrukt mit dem Namen ‘For-Schleife’ zur Verfügung. Eine ‘For-Schleife’ funktioniert unabhängig von einer konkreten Programmiersprache folgendermassen:\nFÜR variable VON startwert BIS endwert [MIT schrittweite]\n    Anweisungen\nENDE FÜR\nÜbersetzt nach Python sieht das so aus:\nfor i in range(n):\n    do...\nstartwert BIS endwert [MIT schrittweite] wird dabei durch range(n) ausgedrückt. Dabei ist n der Endwert. Gezählt wird bis zum aber ohne den Endwert. Startwert und Schrittweite haben Vorgabewerte. Der Vorgabewert für den Start ist 0, derjenige der Schrittweite 1. Weil range() diese vorgegebenen Werte hat, müssen diese nicht explizit angegeben werden. Wenn der Startwert abweichend vom Vorgabewert festgelegt werden soll, kann dieser explizit angegeben werden. Der Aufruf von range() sieht dann so aus:\nrange(startwert, endwert)\nFalls eine von 1 abweichende Schrittweite festgelegt werden soll lautet der Aufruf\nrange(startwert, endwert, schrittweite)\nIn diesem Fall müssen neben dem Endwert sowohl der Startwert und die Schrittweite angegeben werden. Andernfalls kann nicht zwischen den einzelnen Angaben zu Endwert, Startwert und Schrittweite unterschieden werden."
  },
  {
    "objectID": "files/lektionen_hs25/250915_schlaufen/for_loop.html",
    "href": "files/lektionen_hs25/250915_schlaufen/for_loop.html",
    "title": "Wiederholungen in Python (Übung)",
    "section": "",
    "text": "In diesem Arbeitsblatt bauen Sie eine Blume mit Python for-loops und PyTamaro.\nIn der folgenden Zelle werden zuerst alle von PyTamaro zur Verfügung gestellten Funktionen importiert.\n\nfrom pytamaro.de import *\n\nDas Ziel ist es, eine Blume wie die abgebildete zu zeichnen.\n\n\n\nBlume\n\n\nDafür muss als erstes das Gesamtbild in seine Einzelteile zerlegt werden. Die Blume besteht aus 12 weissen Blütenblättern mit einem rosa Rand, die um einen Mittelpunkt angeordnet sind. Der Mittelpunkt besteht aus einem roten Punkt mit einem Farbverlauf in verschiedenen Rottönen.\n\npetal = ellipse(50, 150, weiss)\nzeige_grafik(petal)  \n\n\n\n\n\n\n\n\n\nrim = ellipse(55, 155, rose)\nrimed_petal = ueberlagere(petal, rim)\nzeige_grafik(rimed_petal)\n\n\n\n\n\n\n\n\n\nfixed_petal = fixiere(unten_mitte, rimed_petal)\n\n\ndot = ellipse(30, 30, gelb)\nzeige_grafik(dot)\n\n\n\n\n\n\n\n\n\nrose = rgb_farbe(252, 3, 244)\nrose_dot = ellipse(30, 30, rose)\nzeige_grafik(rose_dot)\n\n\n\n\n\n\n\n\n\npetal_30 = drehe(30, fixed_petal)\npetal_60 = drehe(60, fixed_petal)\npetal_90 = drehe(90, fixed_petal)\npetal_120 = drehe(120, fixed_petal)\npetal_150 = drehe(150, fixed_petal)\npetal_180 = drehe(180, fixed_petal)\npetal_210 = drehe(210, fixed_petal)\npetal_240 = drehe(240, fixed_petal)\npetal_270 = drehe(270, fixed_petal)\npetal_300 = drehe(300, fixed_petal)\npetal_330 = drehe(330, fixed_petal)\n\n\nflower = kombiniere(fixed_petal, petal_30)\nflower = kombiniere(flower, petal_60)\nflower = kombiniere(flower, petal_90)\nflower = kombiniere(flower, petal_120)\nflower = kombiniere(flower, petal_150)\nflower = kombiniere(flower, petal_180)\nflower = kombiniere(flower, petal_210)\nflower = kombiniere(flower, petal_240)\nflower = kombiniere(flower, petal_270)\nflower = kombiniere(flower, petal_300)\nflower = kombiniere(flower, petal_330)\nzeige_grafik(flower)\n\n\n\n\n\n\n\n\n\ncomplete_flower = kombiniere(dot, flower)\nzeige_grafik(complete_flower)\n\n\n\n\n\n\n\n\n\nflower_automated = fixed_petal\nfor i in range(30, 360, 30):\n    rotated_petal = drehe(i, fixed_petal)\n    flower_automated = kombiniere(flower_automated, rotated_petal)\n\n\nzeige_grafik(flower_automated)\n\n\n\n\n\n\n\n\n\ndot_1 = ellipse(30, 30, rgb_farbe(255, 0, 0))\ndot_2 = ellipse(28, 28, rgb_farbe(255, 26, 26))\ndot_3 = ellipse(26, 26, rgb_farbe(255, 51, 51))\ndot_4 = ellipse(24, 24, rgb_farbe(255, 77, 77))\ndot_5 = ellipse(22, 22, rgb_farbe(255, 102, 102))\ndot_6 = ellipse(20, 20, rgb_farbe(255, 128, 128))\ndot_7 = ellipse(18, 18, rgb_farbe(255, 153, 153))\ndot_8 = ellipse(16, 16, rgb_farbe(255, 179, 179))\n\n\nmiddle = ueberlagere(dot_8, dot_7)\nmiddle = ueberlagere(middle, dot_6)\nmiddle = ueberlagere(middle, dot_5)\nmiddle = ueberlagere(middle, dot_4)\nmiddle = ueberlagere(middle, dot_3)\nmiddle = ueberlagere(middle, dot_2)\nmiddle = ueberlagere(middle, dot_1)\n\nzeige_grafik(middle)\n\n\n\n\n\n\n\n\n\nflower_with_middle = ueberlagere(middle, flower_automated)\nzeige_grafik(flower_with_middle)\n\n\n\n\n\n\n\n\n\ndot_0 = ellipse(30, 30, rgb_farbe(255, 0, 0))\n\nfor i in range(1, 8):\n    dot = ellipse(30 - 3*i, 30 - 3*i, rgb_farbe(255, i*26, i*26))\n    dot_0 = ueberlagere(dot, dot_0)\n    \nzeige_grafik(dot_0)\n\n\n\n\n\n\n\n\n\nresult = ueberlagere(dot_0, flower_automated)\nzeige_grafik(result)\nspeichere_grafik('blume.png', result)"
  }
]